Міністерство освіти і науки України
Харківський національний університет радіоелектроніки

Кафедра програмної інженерії

Звіт
З лабораторної роботи №3
З дисципліни «Архітектура програмного забезпечення»
на тему: «Розробка програмної архітектури, створення та відлагодження програмного коду веб-клієнта програмної системи»

Виконавець:		
ст. гр. ПЗПІ-22-7						                    Орлеан М. Е. 

Перевірив:		
ст. викладач кафедри ПІ				                    Сокорчук І. П. 
	


                                                                                                       










Харків 2025
3 РОЗРОБКА ПРОГРАМНОЇ АРХІТЕКТУРИ, СТВОРЕННЯ ТА ВІДЛАГОДЖЕННЯ ПРОГРАМНОГО КОДУ ВЕБ-КЛІЄНТА ПРОГРАМНОЇ СИСТЕМИ

3.1 ІСТОРІЯ ЗМІН


Метою роботи є розробка  бізнес-логіки та функцій адміністрування для серверної частини програмної системи.
У цьому розділі відображено історію внесених змін до звіту, що наведено у таблиці нижче.

Таблиця 1 – Історія змін
№	Дата	Версія	Опис змін
1	29.05.2025	0.1	Створено розділ «Завдання»
2	29.05.2025	0.1	Створено розділ «Опис виконаної роботи»
3	29.05.2025	0.1	Створено розділ «Висновки»
4	29.05.2025	0.1	Додано додатки А, Б, В

3.2 ЗАВДАННЯ


3.2.1 Мета роботи:  
Розробка клієнтської front-end частини програмної системи моніторингу дорожнього руху.

У рамках виконання цієї лабораторної роботи було поставлено завдання розробити веб-клієнт для програмної системи, яка призначена для збору, обробки та аналізу даних про транспортний потік за допомогою IoT-пристроїв, таких як камери з розпізнаванням транспортних засобів і датчики щільності та швидкості руху. Система повинна забезпечувати функціональність для звичайних користувачів (перегляд даних про дорожній рух, затори, небезпечні ділянки) та адміністраторів (керування користувачами, аналіз системних даних, контроль працездатності).

3.3 ОПИС ВИКОНАНОЇ РОБОТИ

3.3.1 Розробка Use Case діаграми  
Під час виконання лабораторної роботи була розроблена Use Case діаграма, яка відображає взаємодію акторів із системою моніторингу дорожнього руху. На діаграмі представлені два основні актори: Користувач та Адміністратор.  
- Користувач може виконувати такі дії: реєструватися, авторизуватися, переглядати дані про транспортний потік (щільність руху, швидкість, затори), отримувати сповіщення про небезпечні ділянки або аварії, а також переглядати аналітичні звіти.  
- Адміністратор має розширені повноваження, зокрема: керування обліковими записами користувачів (активація/деактивація, зміна ролей), перегляд загальної аналітики системи, резервне копіювання бази даних та контроль працездатності сервер

Use Case діаграму можна переглянути в додатку Б.

3.3.2 Розробка діаграми компонентів  
Була розроблена діаграма компонентів, яка ілюструє основні модулі веб-частини системи. На діаграмі зображено такі компоненти:  
- Реєстрація та авторизація: Забезпечує створення облікових записів та вхід у систему.  
- Моніторинг дорожнього руху: Відображає дані з IoT-пристроїв у реальному часі (щільність руху, швидкість, виявлення заторів).  
- Аналітика: Надає інструменти для аналізу даних та формування звітів.  
- Адміністративне керування: Надає інструменти для управління користувачами та системою загалом.  

Діаграму компонентів можна переглянути в додатку Б.

3.3.3 Створення діаграми взаємодії  
Була розроблена діаграма взаємодії, яка демонструє послідовність дій адміністратора в веб-частині системи. На діаграмі показано, як адміністратор авторизується, переглядає список користувачів, змінює їхні ролі або видаляє їх, а також взаємодіє з сервером для оновлення даних про дорожній рух. Діаграму взаємодії можна переглянути в додатку Б.

3.3.4 Створення діаграми діяльності  
Була розроблена діаграма діяльності, яка ілюструє процес роботи користувача в системі. На діаграмі показано послідовність дій: реєстрація, авторизація, перегляд даних про дорожній рух, отримання сповіщень про затори або небезпечні ділянки. Діаграму діяльності можна переглянути в додатку Б.

3.3.5 Створення веб-частини програмної системи  
Була розроблена веб-частина програмної системи моніторингу дорожнього руху, яка включає наступну функціональність:  
- Реєстрація та авторизація: Реалізовані за допомогою компонентів Register.js та Login.js, які дозволяють створювати облікові записи та входити в систему.  
- Дашборд користувача: Реалізований у Dashboard.js, де користувачі можуть переглядати дані про транспортний потік (щільність, швидкість, затори), отримувати сповіщення про небезпечні ділянки та переглядати аналітичні звіти.  
- Навігаційна панель: Реалізована в Navbar.js, забезпечує перехід між сторінками та вихід із системи.  
- Адміністративна панель: Реалізована в AdminPanel.js, дозволяє адміністраторам керувати користувачами (зміна ролей, видалення), переглядати статистику системи та дані з IoT-пристроїв.  

Частину коду можна переглянути в додатку В. Веб-частина розроблена з використанням React та Axios для взаємодії з сервером, побудованим на стеку MERN (MongoDB, Express.js, React, Node.js).

3.4 ВИСНОВКИ

Під час виконання лабораторної роботи було розроблено веб-частину програмної системи моніторингу дорожнього руху, яка відповідає темі збору та аналізу даних про транспортний потік. Було створено UML-діаграми (Use Case, компонентів, взаємодії, діяльності), що візуалізують архітектуру та взаємодію компонентів системи. Веб-частина забезпечує зручну функціональність для користувачів (перегляд даних про дорожній рух, сповіщення) та адміністраторів (управління користувачами та системою). Робота виконана успішно, а система готова до подальшого розвитку, зокрема до інтеграції з мобільним додатком.
 
ДОДАТОК А
Відеозапис

Відеозапис презентації результатів лабораторної роботи: 

Хронологічний опис відеозапису:
 
ДОДАТОК Б

Графічні матеріали


 
Рис. 2.1 – UML діаграма прецедентів

 
Рис. 2.2 – ER діаграма даних
 
Рис. 3.1 – діаграма структури бази даних

  
Рис. 4.1 – програмна реалізація для АРІ


