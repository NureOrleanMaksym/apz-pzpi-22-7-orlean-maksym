Міністерство освіти і науки України
Харківський національний університет радіоелектроніки

Кафедра програмної інженерії

Звіт
З лабораторної роботи №2
З дисципліни «Архітектура програмного забезпечення»
на тему: «РОЗРОБКА СЕРВЕРНОЇ ЧАСТИНИ СИСТЕМИ »

Виконавець:		
ст. гр. ПЗПІ-22-7						                    Орлеан М. Е. 

Перевірив:		
ст. викладач кафедри ПІ				                    Сокорчук І. П. 
	


                                                                                                       









Харків 2025
 
1 ІСТОРІЯ ЗМІН

№	Дата	Версія звіту	Опис змін та виправлень
1	10.05.2025	0.1	Створено розділ «Завдання»
2	12.05.2025	0.1	Створено розділ «Опис виконаної роботи»
3	15.05.2025	0.1	Наповнено додатки А та Б
4	18.05.2025	0.1	Підбито висновки роботи
5	20.05.2025	0.1	Заповнено додаток В з програмним кодом

2 ЗАВДАННЯ

Метою лабораторної роботи є розробка бази даних для серверної частини програмної системи RoadSense та прикладного програмного інтерфейсу (API) для взаємодії з клієнтами. Завдання включають:
1. Розробка будови програмної системи RoadSense.
2. Створення UML діаграми прецедентів для серверної частини.
3. Створення ER діаграми даних для зберігання інформації про трафік, затори та небезпечні ділянки.
4. Розробка бази даних для програмної системи RoadSense.
5. Створення діаграми структури бази даних.
6. Розробка функцій для роботи з базою даних (збір, обробка та аналіз даних трафіку).
7. Розробка REST API для взаємодії серверної частини з клієнтами (веб-інтерфейсом та мобільним додатком).
8. Створення специфікації API для доступу до даних про стан доріг, попередження та рекомендації маршрутів.
9. Створення програмної реалізації API та функцій роботи з базою даних.
10. Перевірка роботи створеного програмного коду.
11. Завантаження коду до GitHub-репозиторію.
12. Створення відеозапису з демонстрацією тестування функціональності серверної частини RoadSense.

3 ОПИС ВИКОНАНОЇ РОБОТИ

У межах лабораторної роботи було реалізовано серверну частину програмної системи RoadSense, призначеної для моніторингу дорожнього руху за допомогою IoT-технологій, збору та обробки даних про стан трафіку, виявлення заторів, небезпечних ділянок і потенційних аварій. Система включає сервер, IoT-пристрої (камери, датчики трафіку), веб-клієнт та мобільний додаток.
Серверна частина розроблена на основі платформи Node.js з використанням фреймворку Express.js. Для зберігання даних використовується NoSQL база даних MongoDB, а взаємодія з нею реалізована через ORM-бібліотеку Mongoose. Обмін даними з IoT-пристроями здійснюється за допомогою протоколу MQTT. IoT-пристрої, такі як камери з розпізнаванням транспортних засобів і датчики трафіку, збирають інформацію про інтенсивність руху, швидкість транспортних засобів, затори та небезпечні ситуації.
Клієнтська частина системи складається з веб-застосунку на React з Tailwind CSS для адміністрування та відображення даних про стан доріг, а також мобільного застосунку для Android, реалізованого на Kotlin, який забезпечує перегляд даних у реальному часі, попередження про аварії та рекомендації з оптимізації маршрутів.
Було розроблено UML діаграму прецедентів, яка описує основні сценарії використання системи. Серед основних акторів виділяються користувач (User), що має змогу реєструватися, авторизуватися, переглядати дані про трафік, отримувати попередження та рекомендації маршрутів, та адміністратор (Admin), який має додаткові функції — керування користувачами, налаштування IoT-пристроїв та резервне копіювання бази даних.
ER-діаграма системи моделює сутності: користувачі, IoT-пристрої, дані трафіку, затори, небезпечні ділянки, попередження. Кожна з цих сутностей реалізована у вигляді окремої колекції в MongoDB зі своєю структурою та взаємозв’язками. Для кожної сутності реалізовано CRUD-функціональність. Наприклад, є можливість зареєструвати користувача, додати IoT-пристрій, записувати та переглядати дані про трафік, а також генерувати попередження.
Розроблено REST API для взаємодії з клієнтами. Основні маршрути:
•	Users: реєстрація, авторизація, профіль користувача.
•	Devices: прив’язка IoT-пристроїв, перегляд статусу.
•	TrafficData: запис та отримання даних про стан доріг.
•	Congestion: аналіз і виявлення заторів.
•	Alerts: попередження про небезпечні ділянки та аварії.
•	Routes: рекомендації з оптимізації маршрутів.
API реалізовано з використанням контролерів, маршрутів та middleware для автентифікації за допомогою JWT і контролю доступу за ролями.
Функціональність API протестовано через Postman:
•	Створення користувача;
•	Авторизація;
•	Передача та отримання даних із IoT-пристроїв;
•	Аналіз заторів;
•	Генерація попереджень і рекомендацій маршрутів.
Програмна реалізація API включає контролери, маршрути та middleware для автентифікації (JWT) і авторизації користувачів з урахуванням ролей.
Для перевірки працездатності системи було виконано тестування API-запитів за допомогою Postman. Зокрема, перевірено: реєстрацію та авторизацію користувачів, додавання IoT-пристроїв, обробку даних трафіку, генерацію попереджень і рекомендацій, функції адміністратора. Результати тестування представлені у відеозаписі на YouTube, посилання на який наведено в кінці звіту.

ВИСНОВКИ

У результаті виконання лабораторної роботи №2 було розроблено базу даних для серверної частини системи RoadSense з використанням MongoDB та бібліотеки Mongoose. Створено UML діаграму прецедентів, ER діаграму та діаграму структури бази даних. Реалізовано REST API для взаємодії з клієнтами, включаючи маршрути для керування користувачами, IoT-пристроями, даними трафіку, заторами, попередженнями та рекомендаціями маршрутів. Функції роботи з базою даних забезпечують виконання CRUD-операцій. API протестовано на відповідність функціональності, описаній у розділі 3.1 Vision & Scope. Код завантажено до GitHub-репозиторію, а звіт підготовлено для експорту у форматі PDF та текстовий файл з кодуванням UTF-8. 
ДОДАТОК А
Відеозапис

Відеозапис презентації результатів лабораторної роботи: 

Хронологічний опис відеозапису:
 
ДОДАТОК Б

Графічні матеріали


 
Рис. 2.1 – UML діаграма прецедентів

 
Рис. 2.2 – ER діаграма даних
 
Рис. 3.1 – діаграма структури бази даних

  
Рис. 4.1 – програмна реалізація для АРІ



Додаток В

1  const express = require('express');
2  const mongoose = require('mongoose');
3  const bodyParser = require('body-parser');
4  
5  // Підключення до MongoDB
6  mongoose.connect('mongodb://localhost:27017/roadsense', {
7    useNewUrlParser: true,
8    useUnifiedTopology: true,
9  });
10 
11 // Створення схем та моделей
12 
13 // Схема користувача
14 const userSchema = new mongoose.Schema({
15   username: { type: String, required: true, unique: true },
16   password: { type: String, required: true },
17   role: { type: String, enum: ['User', 'Admin'], required: true },
18   created_at: { type: Date, default: Date.now },
19   updated_at: { type: Date, default: Date.now },
20 });
21 
22 const User = mongoose.model('User', userSchema);
23 
24 // Схема транспортного засобу
25 const vehicleSchema = new mongoose.Schema({
26   model: { type: String, required: true },
27   license_plate: { type: String, required: true, unique: true },
28   year: { type: Number, required: true },
29   status: { type: String, enum: ['Active', 'Inactive'], required: true },
30   created_at: { type: Date, default: Date.now },
31   updated_at: { type: Date, default: Date.now },
32 });
33 
34 const Vehicle = mongoose.model('Vehicle', vehicleSchema);
35 
36 // Схема маршруту
37 const routeSchema = new mongoose.Schema({
38   start_point: { type: String, required: true },
39   end_point: { type: String, required: true },
40   distance: { type: Number, required: true },
41   vehicle_id: { type: mongoose.Schema.Types.ObjectId, ref: 'Vehicle', required: true },
42   created_at: { type: Date, default: Date.now },
43   updated_at: { type: Date, default: Date.now },
44 });
45 
46 const Route = mongoose.model('Route', routeSchema);
47 
48 // Схема сенсора
49 const sensorSchema = new mongoose.Schema({
50   type: { type: String, required: true },
51   value: { type: Number, required: true },
52   vehicle_id: { type: mongoose.Schema.Types.ObjectId, ref: 'Vehicle', required: true },
53   created_at: { type: Date, default: Date.now },
54   updated_at: { type: Date, default: Date.now },
55 });
56 
57 const Sensor = mongoose.model('Sensor', sensorSchema);
58 
59 // Схема призначення транспортного засобу користувачеві
60 const userVehicleSchema = new mongoose.Schema({
61   user_id: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
62   vehicle_id: { type: mongoose.Schema.Types.ObjectId, ref: 'Vehicle', required: true },
63   assigned_at: { type: Date, default: Date.now },
64 });
65 
66 const UserVehicle = mongoose.model('UserVehicle', userVehicleSchema);
67 
68 // Ініціалізація Express
69 const app = express();
70 app.use(bodyParser.json());
71 
72 // Маршрут для створення користувача
73 app.post('/users', async (req, res) => {
74   try {
75     const user = new User(req.body);
76     await user.save();
77     res.status(201).json(user);
78   } catch (error) {
79     res.status(400).json({ message: error.message });
80   }
81 });
82 
83 // Маршрут для отримання всіх користувачів
84 app.get('/users', async (req, res) => {
85   try {
86     const users = await User.find();
87     res.status(200).json(users);
88   } catch (error) {
89     res.status(400).json({ message: error.message });
90   }
91 });
92 
93 // Маршрут для створення транспортного засобу
94 app.post('/vehicles', async (req, res) => {
95   try {
96     const vehicle = new Vehicle(req.body);
97     await vehicle.save();
98     res.status(201).json(vehicle);
99   } catch (error) {
100     res.status(400).json({ message: error.message });
101   }
102 });
103 
104 // Маршрут для отримання всіх транспортних засобів
105 app.get('/vehicles', async (req, res) => {
106   try {
107     const vehicles = await Vehicle.find();
108     res.status(200).json(vehicles);
109   } catch (error) {
110     res.status(400).json({ message: error.message });
111   }
112 });
113 
114 // Маршрут для створення маршруту
115 app.post('/routes', async (req, res) => {
116   try {
117     const route = new Route(req.body);
118     await route.save();
119     res.status(201).json(route);
120   } catch (error) {
121     res.status(400).json({ message: error.message });
122   }
123 });
124 
125 // Маршрут для отримання всіх маршрутів
126 app.get('/routes', async (req, res) => {
127   try {
128     const routes = await Route.find().populate('vehicle_id', 'model license_plate');
129     res.status(200).json(routes);
130   } catch (error) {
131     res.status(400).json({ message: error.message });
132   }
133 });
134 
135 // Маршрут для створення сенсора
136 app.post('/sensors', async (req, res) => {
137   try {
138     const sensor = new Sensor(req.body);
139     await sensor.save();
140     res.status(201).json(sensor);
141   } catch (error) {
142     res.status(400).json({ message: error.message });
143   }
144 });
145 
146 // Маршрут для отримання всіх сенсорів
147 app.get('/sensors', async (req, res) => {
148   try {
149     const sensors = await Sensor.find().populate('vehicle_id', 'model license_plate');
150     res.status(200).json(sensors);
151   } catch (error) {
152     res.status(400).json({ message: error.message });
153   }
154 });
155 
156 // Маршрут для призначення транспортного засобу користувачеві
157 app.post('/uservehicles', async (req, res) => {
158   try {
159     const userVehicle = new UserVehicle(req.body);
160     await userVehicle.save();
161     res.status(201).json(userVehicle);
162   } catch (error) {
163     res.status(400).json({ message: error.message });
164   }
165 });
166 
167 // Запуск сервера
168 const PORT = 3000;
169 app.listen(PORT, () => {
170   console.log(`Server is running on port ${PORT}`);
171 })
