Міністерство освіти і науки України
Харківський національний університет радіоелектроніки


Кафедра програмної інженерії






Звіт
З лабораторної роботи №5
З дисципліни «Архітектура програмного забезпечення»
на тему: «Розгортання програмної системи та демонстрація її роботи»






Виконавець:		
ст. гр. ПЗПІ-22-7						                    Орлеан М. Е. 

Перевірив:		
ст. викладач кафедри ПІ				                    Сокорчук І. П. 
	




Харків 2025
 
5 РОЗГОРТАННЯ ПРОГРАМНОЇ СИСТЕМИ ТА ДЕМОНСТРАЦІЯ ЇЇ РОБОТИ
5.1 ІСТОРІЯ ЗМІН

Зміни в документі нотуються до таблиці 4.1.

Таблиця 5.1 – Історія змін
№	Дата	Версія звіту	Опис змін та виправлень
1	03.06.2025	0.1	Створено розділ «Історія змін»
2	03.06.2025	0.1	Створено розділ «Завдання»
3	03.06.2025	0.1	Створено розділ «Опис виконаної роботи»
4	03.06.2025	0.1	Створено розділ «Висновки»
5	03.06.2025	0.1	Додано додаток А з посиланням на відеоролик
6	03.06.2025	0.1	Додано додаток Б зі специфікацією API


5.2 ЗАВДАННЯ
Метою виконання цього завдання є повноцінне розгортання та інтеграція всіх ключових компонентів програмної системи моніторингу дорожнього руху, а також демонстрація її функціональності в реальних умовах. Система призначена для збору, обробки та аналізу даних про транспортний потік, виявлення заторів і небезпечних ділянок, а також підвищення ефективності дорожньої інфраструктури. Вона складається з чотирьох основних модулів: серверної частини, веб-інтерфейсу, мобільного застосунку та IoT-підсистеми, яка базується на камерах із розпізнаванням транспортних засобів і датчиках щільності та швидкості руху. Основна ціль полягає в забезпеченні безперервної та узгодженої роботи всіх компонентів для точного збору, обробки та відображення даних про дорожній рух у реальному часі. 
5.3 ОПИС ВИКОНАНОЇ РОБОТИ 
Програмна система моніторингу дорожнього руху побудована на основі багаторівневої архітектури, що включає серверну частину, веб-інтерфейс, мобільний додаток та IoT-підсистему. Усі компоненти розроблені з використанням сучасних технологій, що забезпечують стабільність, масштабованість і зручність для користувачів.
Серверна частина 
• Технології: Node.js, Express.js, MongoDB, MQTT
• Опис: Серверна частина реалізована на платформі Node.js із фреймворком Express.js, що забезпечує високу продуктивність і легкість розгортання. Для зберігання даних про дорожній рух (щільність, швидкість, зато1 ри) використовується NoSQL база даних MongoDB, оптимальна для роботи з неструктурованою інформацією від IoT-пристроїв. Сервер надає RESTful API для взаємодії з веб- та мобільним клієнтами, а також обробляє дані від IoT-пристроїв через протокол MQTT. Для автентифікації користувачів застосовується JSON Web Tokens (JWT).
• Розгортання: Клонуйте репозиторій, виконайте npm install для встановлення залежностей, налаштуйте підключення до MongoDB у файлі конфігурації (.env), після чого запустіть сервер командою npm start. Сервер доступний за адресою localhost:5000. 
Веб-інтерфейс 
• Технології: React, Tailwind CSS, Axios • Опис: Веб-інтерфейс створено з використанням React та Tailwind CSS для адаптивного та сучасного дизайну. Користувачі можуть реєструватися, авторизуватися, переглядати дані про дорожній рух (щільність, швидкість, затори) у реальному часі, отримувати сповіщення про небезпечні ділянки або аварії, а також переглядати аналітичні звіти. Взаємодія з сервером здійснюється через HTTP-запити за допомогою бібліотеки Axios. 
• Розгортання: Клонуйте репозиторій, виконайте npm install для встановлення залежностей, після чого запустіть проєкт командою npm start. Вебінтерфейс доступний за адресою localhost:3000. 
Мобільний додаток 
• Технології: Kotlin, Android Studio, Retrofit 
• Опис: Мобільний додаток розроблено на Kotlin із застосуванням архітектури MVVM. Функціонал відповідає веб-інтерфейсу: користувачі можуть реєструватися, авторизуватися, переглядати дані про дорожній рух, отримувати сповіщення про затори чи небезпечні ділянки. Для мережевих запитів використовується бібліотека Retrofit, а відображення даних здійснюється через LiveData та ViewModel, що забезпечує реактивність і плавність інтерфейсу.
• Розгортання: Клонуйте репозиторій, відкрийте проєкт у Android Studio, підключіть Android-пристрій або запустіть емулятор, зберіть і запустіть додаток. 
IoT-підсистема
• Технології: Камери з розпізнаванням транспортних засобів, датчики щільності та швидкості руху, Arduino IDE, ESP8266, MQTT
• Опис: IoT-підсистема базується на камерах із розпізнаванням транспортних засобів і датчиках, запрограмованих через Arduino IDE із використанням бібліотек ESP8266WiFi та PubSubClient. Дані (щільність руху, швидкість, кількість транспортних засобів) зчитуються з аналогових чи цифрових входів ESP8266, обробляються (перевірка на аномалії) і передаються на 2 сервер через протокол MQTT. Для тестування використовувалася платформа Wokwi, що дозволила емуляцію роботи датчиків до їх фізичної реалізації.
• Розгортання: Клонуйте репозиторій із кодом для IoT-пристрою, відкрийте його в Arduino IDE, налаштуйте параметри Wi-Fi і MQTT-брокера у коді, завантажте прошивку на ESP8266. Для тестування можна запустити емуляцію на Wokwi. 
Взаємодія компонентів
• IoT-підсистема зчитує дані з камер і датчиків та передає їх на сервер через MQTT-брокер.
• Сервер отримує дані через MQTT, обробляє їх (перевірка на коректність) і зберігає у базі MongoDB.
• Веб-інтерфейс і мобільний додаток отримують актуальні дані з сервера через REST API та відображають їх користувачу в режимі реального часу.
• Користувачі можуть переглядати стан дорожнього руху (щільність, швидкість, затори) і отримувати сповіщення про потенційні проблеми. Використані інструменти та технології
• Сервер: Node.js, Express.js, MongoDB, MQTT
• Веб-клієнт: React, Tailwind CSS, Axios
• Мобільний додаток: Kotlin, Android SDK, Retrofit
• IoT: Arduino IDE, ESP8266, MQTT, камери та датчики
• Інші: Git для контролю версій, Postman для тестування API, Wokwi для емуляції IoT-пристрою 


5.4 ВИСНОВКИ 
У результаті виконаної роботи було успішно розгорнуто та протестовано програмну систему моніторингу дорожнього руху, яка включає серверну частину, веб-інтерфейс, мобільний додаток та IoT-підсистему з камерами і датчиками, розробленими самостійно. Система демонструє високу функціональність і практичну цінність, забезпечуючи моніторинг дорожнього руху в реальному часі та своєчасне надсилання сповіщень про затори чи небезпечні ділянки. Завдяки інтеграції власноруч створених IoT-пристроїв, система забезпечує точний збір даних про транспортний потік, що дозволяє оперативно виявляти проблеми на дорогах. Розробка власних датчиків підтвердила їхню надійність і масштабованість, відкриваючи можливості для подальшого розширення функціоналу системи. Проєкт заклав міцну основу для майбутніх інновацій у сфері моніторингу дорожнього руху, підвищення безпеки та оптимізації транспортної інфраструктури. 
 
ДОДАТОК А
Посилання на відеозапис доповіді та хронологічний опис
Відеозапис доповіді на YouTube: https://youtu.be/HJdZNyBagwg
Хронологічний опис:
00:00 – Вступ
00:11 – Початок запуску мобільного додатку
00:34 – Відкриття проекту в Android Studio
00:52 – Налаштування емулятора
01:12 – Згадка бібліотек для мобільного додатку
01:34 – Запуск мобільного додатку
01:50 – Перехід до веб-сайту
02:16 – Установка залежностей для веб-сайту
02:35 – Налаштування змінних середовища
02:54 – Запуск серверної частини
03:18 – Налаштування IoT (опціонально)
03:24 – Запуск веб-клієнта
03:35 – Завершення
 
ДОДАТОК Б
Специфікація API
API Документація для проєкту
«Програмна система моніторингу дорожнього руху»
Загальна інформація
Базовий URL: https://api.trafficmonitor.com/v1
Формат відповіді: JSON
Аутентифікація: JWT Token
Кодування: UTF-8
Аутентифікація
Реєстрація користувача
POST /auth/register
Тіло запиту:
{
”email”: ”user@example.com”,
”password”: ”password123”,
”firstName”: ”Олена”,
”lastName”: ”Ковальчук”,
”phone”: ”+380501234567”
}
Успішна відповідь (201 Created):
{
”status”: ”success”,
”message”: ”Користувача успішно зареєстровано”,
”data”: {
”userId”: ”u12345”,
”email”: ”user@example.com”,
”firstName”: ”Олена”,
”lastName”: ”Ковальчук”
}
}
Авторизація користувача
POST /auth/login
Тіло запиту:
{
”email”: ”user@example.com”,
”password”: ”password123”
}
Успішна відповідь (200 OK):
{
”status”: ”success”,
”token”: ”eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...”,
”refreshToken”: ”eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...”
}
Управління профілем користувача
Додавання або оновлення профілю
POST /profile
Заголовки:
Authorization: Bearer <yourjwttoken >
Тіло запиту :
{
”role”: ”user”,
”preferences”: {
”notifications”: true,
”language”: ”uk”
}
}
Успішна відповідь (200 OK):
{
”status”: ”success”,
”message”: ”Профіль успішно збережено”
}
Дані про дорожній рух
Додавання IoT-показників
POST /traffic-data
Заголовки:
Authorization: Bearer <yourjwttoken >
Тіло запиту :
{
”timestamp”: ”2025-06-03T10:45:00Z”,
”density”: 50,
”speed”: 40,
”vehicles”: 120
}
Успішна відповідь (201 Created):
{
”status”: ”success”,
”message”: ”Дані дорожнього руху успішно збережено”
}
Отримання історії показників
GET /traffic-data
Заголовки:
Authorization: Bearer <yourjwttoken >
Успішна відповідь (200 OK) :
{
”status”: ”success”,
”data”: {
”entries”: [
{

”timestamp”: ”2025-06-03T10:45:00Z”,
”density”: 50,
”speed”: 40,
”vehicles”: 120
},
{
”timestamp”: ”2025-06-02T09:30:00Z”,
”density”: 45,
”speed”: 35,
”vehicles”: 100
}
]
}
}
Моніторинг даних датчиків
Отримання даних з IoT-сенсорів
GET /iot/data
Заголовки:
Authorization: Bearer <yourjwttoken >
Параметри запиту :
{
”userId”: ”u12345”
}
Успішна відповідь (200 OK):
{
”status”: ”success”,
”data”: {
”density”: {
”value”: 50,
”unit”: ”vehicles/km”,
”timestamp”: ”2025-06-03T10:00:00Z”
},
”speed”: {
”value”: 40,
”unit”: ”km/h”,
”timestamp”: ”2025-06-03T10:00:00Z”
},
”vehicles”: {
”value”: 120,
”unit”: ”count”,
”timestamp”: ”2025-06-03T10:00:00Z”
}
}
}
Відправка даних з сенсорів (для IoT-пристрою)
POST /iot/data
Тіло запиту:
{
”userId”: ”u12345”,
”sensorType”: ”density”,
”value”: 50,
”unit”: ”vehicles/km”,
”timestamp”: ”2025-06-03T10:00:00Z”
}
Успішна відповідь (201 Created):
{
”status”: ”success”,
”message”: ”Дані успішно збережено”
}
Сповіщення
Отримання сповіщень
GET /notifications
Заголовки:
Authorization: Bearer <yourjwttoken >
Параметри запиту :
{
”userId”: ”u12345”,
”status”: ”unread”
}
Успішна відповідь (200 OK):
{
”status”: ”success”,
”data”: {
”notifications”: [
{
”notificationId”: ”n12345”,
”userId”: ”u12345”,
”type”: ”traffic_jam”,
”message”: ”Затор на ділянці вул. Центральна”,
”severity”: ”warning”,
”createdAt”: ”2025-06-03T10:01:00Z”,
”status”: ”unread”
}
]
}
}
Коди помилок
•	400: Неправильний запит
•	401: Не авторизовано
•	403: Доступ заборонено
•	404: Ресурс не знайдено
•	422: Помилка валідації даних
•	500: Внутрішня помилка сервера
Розгортання
Вимоги до системи
Серверна частина: Node.js 16+, MongoDB 5.0+, MQTT-брокер (наприклад, Mosquitto),
Redis (опціонально)
IoT-пристрій: ESP8266 з камерами та датчиками, або емулятор Wokwi
Веб-клієнт: Node.js 16+, браузер (Chrome, Firefox)
Мобільний додаток: Android Studio, Android SDK 31+
Змінні середовища
Створити файл .env у корені серверної частини з такими параметрами:
PORT=5000
MONGODB_URI=mongodb://localhost:27017/trafficmonitor
JWT_SECRET=your_jwt_secret_key
MQTT_BROKER_URL=mqtt://localhost:1883
SMTP_HOST=smtp.example.com
SMTP_PORT=587
SMTP_USERNAME=your_smtp_username
SMTP_PASSWORD=your_smtp_password
REDIS_URL=redis://localhost:6379
Кроки розгортання
1. Клонування репозиторію
git clone https://github.com/your-username/trafficmonitor-backend.git
cd trafficmonitor-backend
2. Встановлення залежностей
npm install
3. Налаштування змінних середовища
Скопіювати .env.example до .env і заповнити своїми значеннями.
4. Запуск сервера
npm start
5. Docker розгортання
•	docker build -t trafficmonitor .
•	docker run -d -p 5000:5000 –name trafficmonitor –env-file .env trafficmНалаштування IoT-пристрою
1. Підготовка Arduino IDE
•	Встановити Arduino IDE.
•	Додати підтримку ESP8266.
•	Встановити бібліотеки ESP8266WiFi та PubSubClient.
2. Налаштування прошивки
•	Відкрити код прошивки в Arduino IDE.
•	Вказати параметри Wi-Fi та MQTT.
•	Завантажити прошивку на ESP8266.
3. Підключення датчиків
•	Камера fi GPIO D1
•	Датчик щільності fi A0
•	Датчик швидкості fi A1
4. Тестування в Wokwi (опціонально)
•	Створити проєкт на Wokwi.
•	Імпортувати код.
•	Додати віртуальні датчики.
•	апустити емуляцію.
•	Безпека
•	Усі запити до API захищені JWT.
•	Паролі хешуються через bcrypt.
•	Використовувати HTTPS у production.
•	Впроваджено rate limiting.
•	Обмежити доступ до MQTT через firewall.
•	Додати CORS політики.
Моніторинг та логування
•	Prometheus: Збір метрик.
•	Grafana: Візуалізація.
•	ELK Stack: Логування подій і помило
